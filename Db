using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

namespace ConsoleApp8 {

    class Exemple {
        /// <summary>
        /// Exemple d'utilisation
        /// </summary>
        public Exemple() {
            /* Exemple 1 */
            string sql = "select * from table";
            DataTable dataTable = Db.SetSql(sql).GetDataTable();

            /* Exemple 2 ac parametres */
            sql = "select @id, @name from table";
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            SqlParameter parameter = new SqlParameter("@id", SqlDbType.Int) {
                Value = "id"
            };
            sqlParameters.Add(parameter);
            SqlParameter parameter2 = new SqlParameter("@name", SqlDbType.NVarChar) {
                Value = "name"
            };
            sqlParameters.Add(parameter2);
            dataTable = Db.SetSql(sql).GetDataTable("", sqlParameters);

            /* Exemple 3 */
            string name = Db.Prepare()
                            .GetScalaire("select name from table")
                            .ToString();
        }
    }

    interface IDb {
        SqlDataReader GetDataReader(string sql = "", List<SqlParameter> sqlParameters = null);
        DataTable GetDataTable(string sql = "", List<SqlParameter> sqlParameters = null);
        object GetScalaire(string sql = "", List<SqlParameter> sqlParameters = null);
        IDb SetConnectionString(string connectionString);
    }

    class Db: IDb {

        string Sql = "";
        string ConnectionString = "";

        private Db() {
        }

        public static IDb Prepare() {
            return new Db();
        }

        public static IDb SetSql(string sql) {
            Db db = new Db {
                Sql = sql
            };
            return db;
        }

        public IDb SetConnectionString(string connectionString) {
            if (!string.IsNullOrEmpty(connectionString)) {
                ConnectionString = connectionString;
            }
            return this;
        }

        public SqlDataReader GetDataReader(string sql = "", List<SqlParameter> sqlParameters = null) {
            try {
                using (SqlConnection sqlConnection = new SqlConnection(ConnectionString)) {
                    using (SqlCommand sqlCommand = new SqlCommand()) {
                        sqlCommand.CommandText = string.IsNullOrEmpty(Sql) ? sql : Sql;
                        if (sqlParameters != null) {
                            foreach (SqlParameter parameter in sqlParameters) {
                                sqlCommand.Parameters.Add(parameter);
                            }
                        }
                        return sqlCommand.ExecuteReader();
                    }
                }
            }
            catch(Exception ex) {
                ex.Data["sql"] = string.IsNullOrEmpty(Sql) ? sql : Sql;
                throw ex;
            }
        }

        public DataTable GetDataTable(string sql = "", List<SqlParameter> sqlParameters = null) {
            try {
                using (SqlConnection sqlConnection = new SqlConnection(ConnectionString)) {
                    using (SqlCommand sqlCommand = new SqlCommand()) {
                        sqlCommand.CommandText = string.IsNullOrEmpty(Sql) ? sql : Sql;
                        if (sqlParameters != null) {
                            foreach (SqlParameter parameter in sqlParameters) {
                                sqlCommand.Parameters.Add(parameter);
                            }
                        }
                        using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter()) {
                            DataTable dataTable = new DataTable();
                            sqlDataAdapter.Fill(dataTable);
                            return dataTable;
                        }
                    }
                }
            }
            catch(Exception ex) {
                ex.Data["sql"] = string.IsNullOrEmpty(Sql) ? sql : Sql;
                throw ex;
            }
        }

        public object GetScalaire(string sql = "", List<SqlParameter> sqlParameters = null) {
            try {
                using (SqlConnection sqlConnection = new SqlConnection(ConnectionString)) {
                    using (SqlCommand sqlCommand = new SqlCommand()) {
                        sqlCommand.CommandText = string.IsNullOrEmpty(Sql) ? sql : Sql;
                        if (sqlParameters != null) {
                            foreach (SqlParameter parameter in sqlParameters) {
                                sqlCommand.Parameters.Add(parameter);
                            }
                        }
                        return sqlCommand.ExecuteScalar();
                    }
                }
            }
            catch (Exception ex) {
                ex.Data["sql"] = string.IsNullOrEmpty(Sql) ? sql : Sql;
                throw ex;
            }
        }
    }
}
